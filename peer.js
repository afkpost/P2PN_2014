// Generated by CoffeeScript 1.6.3
(function() {
  var Edge, Graph, Node, Peer, async, constants, count, debug, fs, os, same, xmlrpc,
    _this = this;

  require('array-sugar');

  xmlrpc = require('xmlrpc');

  constants = require('./constants');

  os = require('os');

  async = require('async');

  fs = require('fs');

  Graph = require('./graph').Graph;

  Node = require('./graph').Node;

  Edge = require('./graph').Edge;

  debug = true;

  same = function(p1, p2) {
    return p1.host === p2.host && p1.port === p2.port;
  };

  count = 0;

  Peer = (function() {
    function Peer(port, id, capacity, loggers) {
      var addFriend, addPeer, addPendingFriend, client, createClient, createToken, deleteToken, details, dev, doForceFriend, doFriend, doPing, doPong, doUnfriend, friends, ifaces, isFriend, isPendingFriend, joinEvery30Second, knownPeers, knows, log, pendingFriends, remCap, removeOnError, removePeer, removePendingFriend, reserved, server, unFriend, _i, _len, _ref,
        _this = this;
      this.port = port;
      this.id = id;
      this.capacity = capacity != null ? capacity : 10;
      if (loggers == null) {
        loggers = [];
      }
      remCap = this.capacity;
      reserved = 0;
      knownPeers = [];
      friends = [];
      pendingFriends = [];
      client = null;
      log = function(msg) {
        var logger, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = loggers.length; _i < _len; _i++) {
          logger = loggers[_i];
          _results.push(logger.log(msg));
        }
        return _results;
      };
      this.addLogger = function(logger) {
        return loggers.push(logger);
      };
      ifaces = os.networkInterfaces();
      for (dev in ifaces) {
        _ref = ifaces[dev];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          details = _ref[_i];
          if (details.family === "IPv4" && !details.internal) {
            this.host = details.address;
          }
        }
      }
      addFriend = function(p) {
        if (isFriend(p)) {
          log("is friends already");
        }
        if (remCap <= 0) {
          throw "Add friends sucks";
        }
        friends.push(p);
        return remCap--;
      };
      addPendingFriend = function(p) {
        if (remCap <= 0) {
          throw "Add pending friends sucks";
        }
        pendingFriends.push(p);
        return remCap--;
      };
      unFriend = function(p) {
        var oldFriend;
        oldFriend = friends.findOne(function(p1) {
          return same(p, p1);
        });
        if (oldFriend != null) {
          remCap++;
          return friends.remove(oldFriend);
        } else {
          throw 'unfriend sucks';
        }
      };
      removePendingFriend = function(p) {
        var oldFriend;
        oldFriend = pendingFriends.findOne(function(p1) {
          return same(p, p1);
        });
        if (oldFriend != null) {
          remCap++;
          return pendingFriends.remove(oldFriend);
        } else {
          throw 'remove pending friend sucks';
        }
      };
      createToken = function() {
        return _this.id;
      };
      knows = function(peer) {
        return (knownPeers.findOne(function(p) {
          return same(p, peer);
        })) != null;
      };
      isFriend = function(peer) {
        return (friends.findOne(function(p) {
          return same(p, peer);
        })) != null;
      };
      isPendingFriend = function(peer) {
        return (pendingFriends.findOne(function(p) {
          return same(p, peer);
        })) != null;
      };
      addPeer = function(peer) {
        if ((same(peer, _this)) || (knows(peer))) {
          return;
        }
        return knownPeers.push({
          host: peer.host,
          port: peer.port,
          id: peer.id,
          capacity: peer.capacity
        });
      };
      removePeer = function(peer) {
        try {
          unfriend(peer);
        } catch (_error) {

        }
        return knownPeers.remove(peer);
      };
      removeOnError = function(peer, err) {
        return function(err) {
          if (err) {
            return removePeer(peer);
          }
        };
      };
      createClient = function(peer) {
        client.options.port = peer.port;
        client.options.host = peer.host;
        return client;
      };
      doPong = function(peer) {
        if (debug) {
          log("ponging " + peer.host + ":" + peer.port);
        }
        client = createClient(peer);
        return client.methodCall(constants.PONG, [_this, knownPeers], function(err) {
          return removeOnError(peer);
        });
      };
      doPing = function(peer, self) {
        if (debug) {
          log("pinging " + peer.host + ":" + peer.port);
        }
        client = createClient(peer);
        addPeer(peer);
        return client.methodCall(constants.PING, [self], function(err) {
          return removeOnError(peer);
        });
      };
      doForceFriend = function(peer, token, done) {
        log("" + _this.id + " is forcefriending " + peer.id);
        if (debug) {
          log("force friending " + peer.id);
        }
        if (isFriend(peer)) {
          log("" + _this.id + " and " + peer.id + " are already friends");
          return done();
        } else {
          remCap--;
          addPendingFriend(peer);
          client = createClient(peer);
          return client.methodCall(constants.FORCE_FRIEND, [_this, token], function(err, kickedPeer) {
            removePendingFriend(peer);
            if (err != null) {
              log("" + _this.id + " failed request to " + peer.id);
              removePeer(peer);
            } else {
              addFriend(peer);
              if (kickedPeer) {
                log("" + _this.id + ": " + peer.id + " kicked a peer");
              } else {
                remCap++;
                log("" + _this.id + ": " + peer.id + " did not kick a peer");
              }
            }
            return done(err);
          });
        }
      };
      doFriend = function(peer, token, done) {
        log("" + _this.id + " is trying to friend " + peer.id);
        client = createClient(peer);
        addPendingFriend(peer);
        return client.methodCall(constants.FRIEND, [_this, token], function(err, res) {
          removePendingFriend(peer);
          if (err != null) {
            removePeer(peer);
          } else if (res === constants.errors.ENOUGH_FRIENDS) {
            log("" + _this.id + " is NOT friend with " + peer.id);
          } else {
            addFriend(peer);
            log("" + _this.id + " is now friend with " + peer.id);
          }
          return done();
        });
      };
      doUnfriend = function(peer, newPeer, token) {
        if (peer != null) {
          log("" + _this.id + " is unfriending " + peer.id);
          unFriend(peer);
          client = createClient(peer);
          return client.methodCall(constants.UNFRIEND, [_this, newPeer, token], removeOnError(peer));
        }
      };
      deleteToken = function(peer, token) {
        client = createClient(peer);
        return client.methodCall(constants.DELETE_TOKEN, [token], removeOnError(peer));
      };
      server = xmlrpc.createServer({
        port: this.port
      });
      client = xmlrpc.createClient({
        port: this.port,
        host: "localhost"
      });
      server.on(constants.PING, function(err, _arg, callback) {
        var peer;
        peer = _arg[0];
        callback(null);
        if ((peer != null) && peer !== "") {
          doPong(peer);
          return addPeer(peer);
        }
      });
      server.on(constants.PONG, function(err, _arg, callback) {
        var peer, peers, sender, _j, _len1, _results;
        sender = _arg[0], peers = _arg[1];
        callback(null);
        addPeer(sender);
        _results = [];
        for (_j = 0, _len1 = peers.length; _j < _len1; _j++) {
          peer = peers[_j];
          if ((!knows(peer)) && (!same(peer, _this))) {
            _results.push(doPing(peer, _this));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      server.on(constants.FORCE_FRIEND, function(err, _arg, callback) {
        var candidates, oldFriend, peer, token;
        peer = _arg[0], token = _arg[1];
        if (remCap > 0 || isFriend(peer || isPendingFriend(peer))) {
          log("" + _this.id + " accepts forcefriend from " + peer.id + ". No one kicked");
          callback(null, false);
        } else {
          candidates = friends.copy();
          pendingFriends.forEach(function(p) {
            return candidates.remove(p);
          });
          candidates.sort(function(p1, p2) {
            return p2.capacity - p1.capacity;
          });
          oldFriend = candidates.first;
          doUnfriend(oldFriend, peer, token);
          if (oldFriend != null) {
            log("" + _this.id + " accepts forcefriend from " + peer.id + ". " + oldFriend.id + " kicked (token " + token + ")");
          } else {
            log("buuh");
          }
          callback(null, true);
        }
        if (!(isFriend(peer || isPendingFriend(peer)))) {
          return addFriend(peer);
        }
      });
      server.on(constants.UNFRIEND, function(err, _arg, callback) {
        var oldFriend, peer, token;
        oldFriend = _arg[0], peer = _arg[1], token = _arg[2];
        callback(null);
        if (isFriend(oldFriend)) {
          unFriend(oldFriend);
          return doFriend(peer, token, function() {});
        } else {
          if (token) {
            return deleteToken(peer, token);
          }
        }
      });
      server.on(constants.FRIEND, function(err, _arg, callback) {
        var peer, token;
        peer = _arg[0], token = _arg[1];
        if (token != null) {
          remCap++;
          reserved--;
        }
        if (remCap > 0 || isFriend(peer || isPendingFriend(peer))) {
          log("" + _this.id + " accepts " + peer.id);
          if (!(isFriend(peer || isPendingFriend(peer)))) {
            addFriend(peer);
          }
          return callback(null);
        } else {
          log("" + _this.id + " rejects " + peer.id);
          return callback(null, constants.errors.ENOUGH_FRIENDS);
        }
      });
      server.on(constants.GRAPH, function(err, _arg, callback) {
        _arg;
        log("graph");
        return callback(null, _this.getGraph());
      });
      server.on(constants.TOKEN, function(err, _arg, callback) {
        var token;
        token = _arg[0];
        callback(null);
        if (token != null) {
          return remCap++;
        }
      });
      log("Listening on " + this.host + ": " + this.port);
      this.hello = function(_arg, done) {
        var address, host, peer, _j, _len1, _ref1;
        address = _arg[0];
        if (address != null) {
          _ref1 = address.trim().split(":"), host = _ref1[0], port = _ref1[1];
          doPing({
            host: host,
            port: port
          }, _this);
        } else {
          for (_j = 0, _len1 = knownPeers.length; _j < _len1; _j++) {
            peer = knownPeers[_j];
            doPing(peer);
          }
        }
        return done();
      };
      this.getGraph = function() {
        var graph, node;
        graph = new Graph();
        node = new Node(_this.id, _this.capacity);
        graph.addNode(node);
        friends.forEach(function(n) {
          return graph.addEdge(new Edge(node, new Node(n.id, n.capacity)));
        });
        return graph;
      };
      this.printNeighbourhood = function(args, done) {
        var graph, handlePeer, nextIsOutput, out, p, peers, _j, _len1;
        peers = [];
        out = null;
        nextIsOutput = false;
        args.forEach(function(arg) {
          if (arg === "-o") {
            return nextIsOutput = true;
          } else if (nextIsOutput) {
            nextIsOutput = false;
            return out = arg;
          } else {
            if (arg !== "") {
              return peers.push(arg);
            }
          }
        });
        graph = _this.getGraph();
        handlePeer = function(peer, done) {
          peer = knownPeers.findOne(function(p) {
            return p.id === peer;
          });
          if (peer == null) {
            done();
            return;
          }
          client = createClient(peer);
          return client.methodCall(constants.GRAPH, [], function(err, g) {
            log("got response from " + peer.id);
            if (err) {
              return done(err);
            } else {
              g.nodes.forEach(function(n) {
                return graph.addNode(new Node(n.id, n.capacity));
              });
              g.edges.forEach(function(e) {
                e.n1 = new Node(e.n1.id, e.n1.capacity);
                e.n2 = new Node(e.n2.id, e.n2.capacity);
                return graph.addEdge(new Edge(e.n1, e.n2));
              });
              return done();
            }
          });
        };
        if (debug && peers.isEmpty) {
          for (_j = 0, _len1 = knownPeers.length; _j < _len1; _j++) {
            p = knownPeers[_j];
            peers.push(p.id);
          }
        }
        return async.each(peers, handlePeer, function(err) {
          if (err != null) {
            log("error in printing" + err);
          } else if (out != null) {
            fs.writeFile(out, graph.print());
          } else {
            log("reserved: " + reserved + "/" + remCap + "\n" + graph.print());
          }
          return done();
        });
      };
      this.dream = function(_arg, done) {
        var timeout;
        timeout = _arg[0];
        timeout = parseInt(timeout) || 1000;
        return setTimeout(done, timeout);
      };
      this.printKnownPeers = function(done) {
        var ids, _j, _len1;
        log("Known peers");
        ids = knownPeers.map(function(p) {
          return p.id;
        });
        ids.sort();
        for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
          id = ids[_j];
          log(id);
        }
        return done();
      };
      this.joinNeighbourhood = function(done) {
        var candidates, contactedPeers, haveCapacity, highCap, highCaps, idx, startLoop;
        contactedPeers = [];
        haveCapacity = function() {
          return remCap > 0;
        };
        if (_this.capacity === 1) {
          candidates = knownPeers.filter(function(p) {
            return p.capacity > 1;
          });
          candidates.sort(function(p1, p2) {
            return p1.capacity - p2.capacity;
          });
          return async.whilst(haveCapacity, function(done) {
            var peer;
            peer = candidates.first;
            candidates.remove(peer);
            if (peer != null) {
              return doFriend(peer, null, done);
            } else {
              return done("No more peers");
            }
          }, function(err) {
            if ((err != null) && debug) {
              log(err);
            }
            return done();
          });
        } else {
          startLoop = function(err) {
            var friendRandomPeer;
            log("" + _this.id + ": loop started");
            if (err) {
              if (err.peer != null) {
                knownPeers.remove(err.peer);
              }
              return _this.joinNeighbourhood(function() {});
            } else {
              friendRandomPeer = function(done) {
                var idx, peer;
                candidates = knownPeers.copy();
                friends.forEach(function(f1) {
                  var f, _j, _len1, _ref1, _results;
                  _ref1 = candidates.filter(function(f2) {
                    return f1.id === f2.id;
                  });
                  _results = [];
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    f = _ref1[_j];
                    _results.push(candidates.remove(f));
                  }
                  return _results;
                });
                contactedPeers.forEach(function(f1) {
                  var f, _j, _len1, _ref1, _results;
                  _ref1 = candidates.filter(function(f2) {
                    return f1.id === f2.id;
                  });
                  _results = [];
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    f = _ref1[_j];
                    _results.push(candidates.remove(f));
                  }
                  return _results;
                });
                idx = Math.floor(Math.random() * candidates.length);
                peer = candidates[idx];
                contactedPeers.push(peer);
                if (peer != null) {
                  return doFriend(peer, null, done);
                } else {
                  return done("No more peers");
                }
              };
              return async.whilst(haveCapacity, friendRandomPeer, function(err) {
                log(remCap);
                if (debug && (err != null)) {
                  log(err);
                }
                return done();
              });
            }
          };
          highCaps = knownPeers.filter(function(p) {
            return p.capacity >= constants.limits.HIGH && !isFriend(p);
          });
          idx = Math.floor(Math.random() * highCaps.length);
          highCap = highCaps[idx];
          if ((highCap != null) && remCap >= 2) {
            return doForceFriend(highCap, createToken(), startLoop);
          } else {
            return startLoop();
          }
        }
      };
      joinEvery30Second = function() {
        return setTimeout(function() {
          console.log("### %s TICK ###", _this.id);
          return _this.joinNeighbourhood(function() {});
        }, 15000);
      };
      setTimeout(function() {
        return _this.joinNeighbourhood(joinEvery30Second);
      }, 2000);
      /*
      setInterval () =>
          async.each friends, (f, done) =>
              doPing f, null
              done()
          , () =>
      , 10000
      */

    }

    return Peer;

  })();

  module.exports = Peer;

}).call(this);
